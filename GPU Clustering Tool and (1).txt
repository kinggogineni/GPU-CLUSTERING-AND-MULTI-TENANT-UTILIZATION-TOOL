GPU Clustering Tool and Emulate GPU Details


### **Step 1: Develop a Basic GPU Clustering Tool**
The GPU clustering tool will first need to gather system information, specifically focusing on CPU resources, and simulate GPU details.

1. **Set Up Project Environment**
   - Create a project directory and initialize a Python virtual environment:
   ```bash
   mkdir gpu_clustering_tool
   cd gpu_clustering_tool
   python3 -m venv venv
   source venv/bin/activate
   ```

2. **Install Required Python Libraries**
   Install necessary libraries for system information, clustering, and web interface:
   ```bash
   pip install psutil flask numpy pandas
   ```

3. **Create Python Script to Gather System Information**
   Write a Python script that collects CPU and memory information and simulates GPU details:
   ```python
   # gpu_clustering.py
   import psutil
   import numpy as np

   def get_system_info():
       # Get CPU information
       cpu_count = psutil.cpu_count(logical=True)
       cpu_freq = psutil.cpu_freq().max
       memory_info = psutil.virtual_memory().total / (1024 ** 3)  # Convert to GB

       # Simulate GPU information
       gpu_info = {
           "gpu_count": cpu_count // 2,  # Simulate half of CPU cores as GPUs
           "gpu_memory": memory_info / 2,  # Simulate half of system memory as GPU memory
           "gpu_frequency": cpu_freq / 2  # Simulate GPU frequency as half of CPU frequency
       }

       return {
           "cpu_count": cpu_count,
           "cpu_frequency": cpu_freq,
           "memory": memory_info,
           "gpu_info": gpu_info
       }

   if __name__ == "__main__":
       system_info = get_system_info()
       print(system_info)
   ```
   - This script uses the `psutil` library to gather CPU and memory information and simulates GPU details.

### **Step 2: Create a REST API to Serve System Information**


1. **Set Up Flask API**
   Create a new Python script to serve the system information via an API endpoint:
   ```python
   # app.py
   from flask import Flask, jsonify
   from gpu_clustering import get_system_info

   app = Flask(__name__)

   @app.route("/api/system_info", methods=["GET"])
   def system_info():
       info = get_system_info()
       return jsonify(info)

   if __name__ == "__main__":
       app.run(host="0.0.0.0", port=5000, debug=True)
   ```
   - This script sets up a simple Flask API that serves system information at `/api/system_info`.

2. **Run the Flask API**
   Start the Flask API to make the system information accessible:
   ```bash
   python app.py
   ```
   - The API will be available at `http://localhost:5000/api/system_info`.


Create a user-friendly web interface to view system information and simulate GPU clustering.

1. **Set Up HTML and JavaScript for Dashboard**
   Create a simple HTML file (`dashboard.html`) to display the system information in a user-friendly format:
   ```html
   <!-- dashboard.html -->
   <!DOCTYPE html>
   <html lang="en">
   <head>
       <meta charset="UTF-8">
       <meta name="viewport" content="width=device-width, initial-scale=1.0">
       <title>GPU Clustering Dashboard</title>
       <script>
           async function fetchSystemInfo() {
               const response = await fetch('http://localhost:5000/api/system_info');
               const data = await response.json();
               document.getElementById("cpu-info").innerText = `CPU Count: ${data.cpu_count}, Frequency: ${data.cpu_frequency} MHz, Memory: ${data.memory.toFixed(2)} GB`;
               document.getElementById("gpu-info").innerText = `GPU Count: ${data.gpu_info.gpu_count}, Memory: ${data.gpu_info.gpu_memory.toFixed(2)} GB, Frequency: ${data.gpu_info.gpu_frequency} MHz`;
           }

           window.onload = fetchSystemInfo;
       </script>
   </head>
   <body>
       <h1>GPU Clustering Dashboard</h1>
       <div id="cpu-info"></div>
       <div id="gpu-info"></div>
   </body>
   </html>
   ```
   - This script fetches system information from the API and displays it on the webpage.

2. **Serve the HTML File**
   Update the Flask API to serve the HTML file:
   ```python
   # app.py (Updated)
   from flask import Flask, jsonify, send_from_directory
   from gpu_clustering import get_system_info

   app = Flask(__name__)

   @app.route("/api/system_info", methods=["GET"])
   def system_info():
       info = get_system_info()
       return jsonify(info)

   @app.route("/dashboard", methods=["GET"])
   def dashboard():
       return send_from_directory('.', 'dashboard.html')

   if __name__ == "__main__":
       app.run(host="0.0.0.0", port=5000, debug=True)
   ```
   - Now, the dashboard can be accessed at `http://localhost:5000/dashboard`.

### **Step 4: Test and Refine the Tool**
   Start the Flask server:
   ```bash
   python app.py
   ```
   - Access the dashboard at `http://localhost:5000/dashboard` to view the system information.


after creating and the host server creating the web is not accessing the ip address 
